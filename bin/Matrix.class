 // Método para multiplicar uma matriz por um escalar
    public static Matrix times(Matrix matriz, float escalar) {
        Matrix multiplicada = new Matrix(matriz.getRows(), matriz.getCols());
        for (int linha = 0; linha < matriz.getRows(); linha++) {
            for (int coluna = 0; coluna < matriz.getCols(); coluna++) {
                float value = matriz.get(linha, coluna) * escalar;
                multiplicada.set(linha, coluna, value);
            }
        }
        return multiplicada;
    }

    // Método para multiplicar um vetor por um escalar
    public static Vector times(Vector vetor, float escalar) {
        Vector multiplicada = new Vector(vetor.getRows(), vetor.getColumns());
        for (int i = 0; i < vetor.getRows(); i++) {
            float value = vetor.get(i) * escalar;
            multiplicada.set(i, value);
        }
        return multiplicada;
    }

    // Produto escalar (dot) para vetores, retornando um escalar
    public static float dot(Vector vetor1, Vector vetor2) {
        if (vetor1.getColumns() != vetor2.getRows()) {
            throw new IllegalArgumentException("O número de colunas do primeiro vetor deve ser igual ao número de linhas do segundo vetor.");
        }
        float resultado = 0;
        for (int i = 0; i < vetor1.getRows(); i++) {
            resultado += vetor1.get(i) * vetor2.get(i);
        }
        return resultado;
    }

    // Produto entre duas matrizes (dot)
    public static Matrix dot(Matrix matriz1, Matrix matriz2) {
        if (matriz1.getCols() != matriz2.getRows()) {
            throw new IllegalArgumentException("O número de colunas da primeira matriz deve ser igual ao número de linhas da segunda matriz.");
        }
        Matrix multiplicada = new Matrix(matriz1.getRows(), matriz2.getCols());
        for (int linha = 0; linha < matriz1.getRows(); linha++) {
            for (int coluna = 0; coluna < matriz2.getCols(); coluna++) {
                float valorM = 0;
                for (int j = 0; j < matriz1.getCols(); j++) {
                    valorM += matriz1.get(linha, j) * matriz2.get(j, coluna);
                }
                multiplicada.set(linha, coluna, valorM);
            }
        }
        return multiplicada;
    }

    // Método iterativo para resolver sistema linear com critério de parada
    public static void solve(Matrix matriz) {
        float a00 = matriz.get(0, 0), a01 = matriz.get(0, 1), a02 = matriz.get(0, 2), b0 = matriz.get(0, 3);
        float a10 = matriz.get(1, 0), a11 = matriz.get(1, 1), a12 = matriz.get(1, 2), b1 = matriz.get(1, 3);
        float a20 = matriz.get(2, 0), a21 = matriz.get(2, 1), a22 = matriz.get(2, 2), b2 = matriz.get(2, 3);
        float x0 = 0, y0 = 0, z0 = 0;
        float tol = 1e-6f;
        for (int i = 0; i < 1000; i++) {
            float xn = (b0 - a01 * y0 - a02 * z0) / a00;
            float yn = (b1 - a10 * x0 - a12 * z0) / a11;
            float zn = (b2 - a20 * x0 - a21 * y0) / a22;
            if (Math.abs(xn - x0) < tol && Math.abs(yn - y0) < tol && Math.abs(zn - z0) < tol) {
                break;
            }
            x0 = xn;
            y0 = yn;
            z0 = zn;
        }
        System.out.println("X0: " + x0);
        System.out.println("Y0: " + y0);
        System.out.println("Z0: " + z0);
    }
