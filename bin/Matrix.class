public class Matrix {

    private int rows;
    private int cols;
    private float[] elements;
    private float[][] matriz;
    
    // Construtor com elementos
    public Matrix(int rows, int cols, float[] elements) {
        if (elements.length != rows * cols) {
            throw new IllegalArgumentException("Número de elementos não corresponde ao tamanho da matriz.");
        }
        
        this.rows = rows;
        this.cols = cols;
        this.elements = elements;
        this.matriz = new float[rows][cols];
        
        // Preenche a matriz com os elementos
        int index = 0;
        for (int linha = 0; linha < rows; linha++) {
            for (int coluna = 0; coluna < cols; coluna++) {
                matriz[linha][coluna] = elements[index++];
            }
        }
    }
    
    // Construtor sem elementos
    public Matrix(int rows, int cols) {
        this.rows = rows;
        this.cols = cols;
        this.matriz = new float[rows][cols];
    }
    
    public int getRows() {
        return rows;
    }

    public int getCols() {
        return cols;
    }

    public float get(int i, int j) {
        return matriz[i][j];
    }

    public void set(int i, int j, float value) {
        matriz[i][j] = value;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("[\n"); // Abre a matriz com uma nova linha para visualização clara
    
        for (int i = 0; i < rows; i++) {
            sb.append("  [");
            for (int j = 0; j < cols; j++) {
                sb.append(matriz[i][j]);
                if (j < cols - 1) {
                    sb.append(", ");
                }
            }
            sb.append("]");
            if (i < rows - 1) {
                sb.append(",\n");
            }
        }
    
        sb.append("\n]");
        return sb.toString();
    }
}
